Timer unit: 1e-09 s

Total time: 1.3279 s
File: /var/folders/q5/c6zwkpms6lndl60vswwpd_4w0000gn/T/ipykernel_85073/2063463414.py
Function: fit at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           def fit(population):
     2         1       1000.0   1000.0      0.0      Error = False
     3                                               #objective value 
     4         1          0.0      0.0      0.0      gamma = 100000
     5         1       1000.0   1000.0      0.0      Hour_S = population[0]
     6         1          0.0      0.0      0.0      Hour_D = population[1]
     7         1          0.0      0.0      0.0      Block_S = population[4]
     8         1       1000.0   1000.0      0.0      Block_D = population[5]
     9         1          0.0      0.0      0.0      Flex_S = population[2]
    10         1          0.0      0.0      0.0      Flex_D = population[3]
    11                                               
    12                                               
    13         1  472789000.0 472789000.0     35.6      Res_HD = sum(0.5*(2*HD_bids['price'][1000*i+j]+Hour_D[i][j]*(HD_bids['price'][1000*i+j+1]-HD_bids['price'][1000*i+j]))*Hour_D[i][j]*(HD_bids['Quantity'][1000*i+j+1]-HD_bids['Quantity'][1000*i+j]) for j in range(999) for i in range(24))                
    14         1  469409000.0 469409000.0     35.3      Res_HS = sum(0.5*(2*HS_bids['price'][1000*i+j]+Hour_S[i][j]*(HS_bids['price'][1000*i+j+1]-HS_bids['price'][1000*i+j]))*Hour_S[i][j]*(HS_bids['Quantity'][1000*i+j+1]-HS_bids['Quantity'][1000*i+j]) for j in range(999) for i in range(24))  
    15                                                
    16         1    1545000.0 1545000.0      0.1      Res_BD = sum(BD_bids['Duration'][i]*BD_bids['Quantity'][i]*BD_bids['price'][i]*Block_D[i] for i in range(len(Block_D))) 
    17         1    2241000.0 2241000.0      0.2      Res_BS =  sum(BS_bids['Duration'][i]*BS_bids['Quantity'][i]*BS_bids['price'][i]*Block_S[i] for i in range(len(Block_S)))
    18                                               
    19         1     185000.0 185000.0      0.0      Res_FD = sum(FD_bids['Quantity'][i]*FD_bids['price'][i] *sum(Flex_D[h][i] for h in range(24)) for i in range(len(FD_bids))) 
    20         1     405000.0 405000.0      0.0      Res_FS = sum(FS_bids['Quantity'][i]*FS_bids['price'][i] *sum(Flex_S[h][i] for h in range(24)) for i in range(len(FS_bids)))
    21                                               
    22         1    1791000.0 1791000.0      0.1      BA = sum(Pair(1,h,HD_bids,'DQ')[0]-Pair(1,h,HD_bids,'DP')[0] for h in range(24))
    23         1       1000.0   1000.0      0.0      OBJ_V = Res_HD - Res_HS + Res_BD - Res_BS + Res_FD - Res_FS + BA
    24                                               
    25        53       8000.0    150.9      0.0      for i in Child_D:
    26        53       6000.0    113.2      0.0          if Block_D[i]== 1:
    27                                                       if Parent_D[i]!=1:
    28                                                           print(' Parent check fail')
    29                                                           Error = True
    30        77       9000.0    116.9      0.0      for i in Child_S:
    31        77       7000.0     90.9      0.0          if Block_S[i]== 1:
    32                                                       if Parent_S[i]!=1:
    33                                                           print('Parent check fail')
    34                                                           Error = True
    35                                                           break
    36                                               
    37                                             
    38                                               # penalty by constarint
    39         1          0.0      0.0      0.0      Penalty = 0
    40                                               #  # penalty for constraint 6-7    
    41        24       7000.0    291.7      0.0      for h in range(24):
    42        24  187316000.0 7804833.3     14.1          x = sum((HS_bids['price'][1000*h+j+1]-HS_bids['price'][1000*h+j]) * Hour_S[h][j] for j in range(len(Hour_S[h])-1))
    43        24  187090000.0 7795416.7     14.1          y = 2000+sum((HD_bids['price'][1000*h+j+1]-HD_bids['price'][1000*h+j]) * Hour_D[h][j] for j in range(len(Hour_D[h])-1))
    44       806     127000.0    157.6      0.0          for i in range(len(FS_bids)):
    45       805    3333000.0   4140.4      0.3              if x - FS_bids['price'][i] > gamma * Flex_S[h][i]:
    46         1          0.0      0.0      0.0                  Error = True
    47         1          0.0      0.0      0.0                  break
    48       335      71000.0    211.9      0.0          for i in range(len(FD_bids)):
    49       333    1375000.0   4129.1      0.1              if FD_bids['price'][i]-x < gamma * Flex_D[h][i]:
    50         2          0.0      0.0      0.0                  Error = True
    51         2          0.0      0.0      0.0                  break        
    52        24     170000.0   7083.3      0.0          if round(x,5) == round(y,5):
    53        24       7000.0    291.7      0.0              Error=False
    54                                                   else:
    55                                                       Error=True
    56         1          0.0      0.0      0.0      return OBJ_V,Error